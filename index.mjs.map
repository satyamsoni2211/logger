{"version":3,"file":"index.mjs","sources":["lib/enums.js","lib/record.js","lib/time.js","lib/logger.js","lib/base_classes.js","lib/handler.js","lib/formatter.js","lib/utils.js"],"sourcesContent":["var Levels;\n(function (Levels) {\n    Levels[Levels[\"not_set\"] = 0] = \"not_set\";\n    Levels[Levels[\"debug\"] = 1] = \"debug\";\n    Levels[Levels[\"info\"] = 2] = \"info\";\n    Levels[Levels[\"warn\"] = 3] = \"warn\";\n    Levels[Levels[\"error\"] = 4] = \"error\";\n    Levels[Levels[\"critical\"] = 5] = \"critical\";\n})(Levels || (Levels = {}));\nvar LevelTags;\n(function (LevelTags) {\n    LevelTags[\"not_set\"] = \"NOT_SET\";\n    LevelTags[\"debug\"] = \"DEBUG\";\n    LevelTags[\"info\"] = \"INFO\";\n    LevelTags[\"warn\"] = \"WARN\";\n    LevelTags[\"error\"] = \"ERROR\";\n    LevelTags[\"critical\"] = \"CRITICAL\";\n})(LevelTags || (LevelTags = {}));\nexport { Levels, LevelTags };\n//# sourceMappingURL=enums.js.map","import moment from 'moment';\nimport { LevelTags } from './enums';\nexport class LogRecord {\n    event;\n    level;\n    levelNo;\n    extra;\n    context_key;\n    args = [];\n    time;\n    constructor(event, levelNo, level = LevelTags.debug, time, extra = {}, context_key = \"\", args = []) {\n        this.event = event;\n        this.level = level;\n        this.time = time;\n        this.extra = extra;\n        this.context_key = context_key;\n        this.args = args;\n        this.levelNo = levelNo;\n        this.getMessage = this.getMessage.bind(this);\n        this.getTimeInMilliseconds = this.getTimeInMilliseconds.bind(this);\n        this.getIsoFormatTime = this.getIsoFormatTime.bind(this);\n        this.getFormattedTime = this.getFormattedTime.bind(this);\n    }\n    getMessage() {\n        return this.event;\n    }\n    getTimeInMilliseconds() {\n        return this.time;\n    }\n    getIsoFormatTime() {\n        return moment.unix(this.time).toISOString();\n    }\n    getFormattedTime(format = \"YYYY-MM-DD HH:mm:ss ZZ\") {\n        return moment.unix(this.time).format(format);\n    }\n}\n//# sourceMappingURL=record.js.map","import Moment from 'moment';\n/**\n * Function to get current time in ISO format\n * @returns {string}\n */\nexport const current_iso_time = () => {\n    return Moment().toISOString();\n};\n/**\n * Function to get current time in unix timestamp\n * @returns {number}\n */\nexport const current_epoc = () => {\n    return Moment().unix();\n};\n/**\n * Function to get current time in unix timestamp in milliseconds\n * @returns {number}\n */\nexport const current_epoc_millis = () => {\n    return Moment().valueOf();\n};\n/**\n * Function to format the current time with user defined format\n * @param {string} format - Format of the datetime\n * @returns {string} formatted datetime\n */\nexport const custom_formatted = (format) => {\n    return Moment().format(format);\n};\n//# sourceMappingURL=time.js.map","import { Levels, LevelTags } from \"./enums\";\nimport { LogRecord } from \"./record\";\nimport { current_epoc } from \"./time\";\nclass Logger {\n    handlers = [];\n    /**\n     * property level for handler\n     * @type number\n     * @default 0\n     */\n    level = 0;\n    addHandler(handler) {\n        this.handlers.push(handler);\n    }\n    ;\n    /**\n     * Function to set log level\n     * @param {Levels} level: log level to set\n     */\n    setLevel(level) {\n        this.level = level;\n    }\n    ;\n    createRecord(event, levelNo, tag, time, props = {}) {\n        const record = new LogRecord(event, levelNo, tag, time, props);\n        return record;\n    }\n    handle(record) {\n        for (const handler of this.handlers) {\n            handler.emit(record);\n        }\n    }\n    ;\n    filter_record(current_level, log_level) {\n        return (current_level > Levels.not_set && current_level <= log_level) || (current_level === Levels.not_set);\n    }\n    /**\n     * Function to log message as info\n     * @param {String} message: message to be logged\n     * @param {object} props: extra parameters to support interpolation\n     * @returns\n     */\n    info(message, props = {}) {\n        if (this.filter_record(this.level, Levels.info)) {\n            const record = this.createRecord(message, Levels.info, LevelTags.info, current_epoc(), props);\n            this.handle(record);\n        }\n    }\n    ;\n    debug(message, props = {}) {\n        if (this.filter_record(this.level, Levels.debug)) {\n            const record = this.createRecord(message, Levels.debug, LevelTags.debug, current_epoc(), props);\n            this.handle(record);\n        }\n    }\n    warn(message, props = {}) {\n        if (this.filter_record(this.level, Levels.warn)) {\n            const record = this.createRecord(message, Levels.warn, LevelTags.warn, current_epoc(), props);\n            this.handle(record);\n        }\n    }\n    error(message, props = {}) {\n        if (this.filter_record(this.level, Levels.error)) {\n            const record = this.createRecord(message, Levels.error, LevelTags.error, current_epoc(), props);\n            this.handle(record);\n        }\n    }\n    critical(message, props = {}) {\n        if (this.filter_record(this.level, Levels.critical)) {\n            const record = this.createRecord(message, Levels.critical, LevelTags.critical, current_epoc(), props);\n            this.handle(record);\n        }\n    }\n}\nexport { Logger };\n//# sourceMappingURL=logger.js.map","/**\n * Abstract base class for Handler\n * Can be used to create a new Handler instance\n */\nclass BaseHandler {\n    formatter;\n    /**\n     * Level number corresponding to the log levle\n     * of handler. By default this is 1 (debug)\n     * This can be overridden by setLevel() method\n     * @type {number}\n     */\n    level;\n    /**\n     * constructor for Handler class\n     * by default it sets level to debug\n     */\n    constructor() {\n        this.level = 1;\n    }\n    /**\n     * Function to override the default formatter\n     * this is required as by default no formatter is set\n     * @param {FormatterInterfaceType} formatter - Formatter instance\n     * @returns {void}\n     */\n    setFormatter(formatter) {\n        this.formatter = formatter;\n    }\n    /**\n     * Function to override log level of\n     * handler class\n     * @param {number} level - Log level to override (1,5)\n     */\n    setLevel(level) {\n        this.level = level;\n    }\n    /**\n     * Filter function to check if handler needs to process the record\n     * or skip it based of its log level\n     * @param {number} level - Log level to check for filtering\n     * @returns {boolean}\n     */\n    filter(level) {\n        if (this.level <= level) {\n            return true;\n        }\n        return false;\n    }\n}\n/**\n * Abstract base class for Formatter\n * Can be used to create a new Formatter instance\n */\nclass BaseFormatter {\n    format(value) {\n        const m = this.formatRecord(value);\n        return m;\n    }\n}\nexport { BaseHandler, BaseFormatter };\n//# sourceMappingURL=base_classes.js.map","import axios from \"axios\";\nimport { BaseHandler } from \"./base_classes\";\nclass ConsoleHandler extends BaseHandler {\n    /**\n     * Function to fetch console handler corresponding to\n     * log level\n     * @param {string} level - Log level to fetch console handler\n     * @returns {Function}\n     */\n    getConsoleMethod(level) {\n        let method;\n        switch (level.toLowerCase()) {\n            case \"debug\":\n                method = console.debug;\n                break;\n            case \"info\":\n                method = console.info;\n                break;\n            case \"warn\":\n                method = console.warn;\n                break;\n            case \"critical\":\n                method = console.error;\n                break;\n            case \"error\":\n                method = console.error;\n                break;\n            default:\n                method = console.log;\n        }\n        return method;\n    }\n    /**\n     * @override\n     */\n    emit(record) {\n        if (this.filter(record.levelNo)) {\n            const message = this.formatter.format(record);\n            const method = this.getConsoleMethod(record.level);\n            method.call(this, message);\n        }\n    }\n    ;\n}\nclass StreamHandler extends BaseHandler {\n    /**\n     * Endpoint to post data to sumo logic\n     * @type {string}\n     */\n    endpoint;\n    /**\n     * @constructor\n     * @param {Object} props - Props for the constructor\n     * @property {string} endpoint - Endpoint to post data to sumo logic\n     */\n    constructor(props) {\n        super();\n        this.endpoint = props.endpoint;\n    }\n    /**\n     * Function to post data to sumo logic\n     * @param {string} message - Message to be posted to sumo logic\n     */\n    postToSumo(message) {\n        axios.post(this.endpoint, message, {\n            headers: { 'Content-Type': 'application/json' },\n        }).then(response => {\n            console.log(response.data);\n        });\n    }\n    /**\n     * @override\n     */\n    emit(record) {\n        const message = this.formatter.format(record);\n        this.postToSumo(message);\n    }\n}\nexport { ConsoleHandler, StreamHandler };\n//# sourceMappingURL=handler.js.map","import { BaseFormatter } from \"./base_classes\";\nclass BasicFormatter extends BaseFormatter {\n    /**\n     * @override\n     */\n    formatRecord(record) {\n        const m = `[${record.level}] ${record.getIsoFormatTime()} ${record.getMessage()}`;\n        return m.replace(/\\$\\{(\\S+)\\}/g, function (all) {\n            let token = all.slice(2, all.length - 1);\n            return record.extra[token] || all;\n        });\n    }\n}\nclass JSONFormatter extends BaseFormatter {\n    /**\n     * Function to check if the message is an Error or not\n     * @param {any} message - Message to check for Error instance\n     * @returns {boolean} True if the message is an Error instance, false otherwise\n     */\n    isError(message) {\n        if (message instanceof Error) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Function to Get the stack from message if it is an Error instance\n     * @param {RecordInterfaceType} record - Record Instance to get stack from\n     * @returns {string|undefined} Stack from the error instance if exists, otherwise undefined\n     */\n    getStack(record) {\n        const message = record.getMessage();\n        if (this.isError(message)) {\n            return message.stack;\n        }\n    }\n    /**\n     * Function to interpolateRecord if extra parameters are present\n     * @param {string} record - record to interpolate\n     * @param {object} extra - extra arguments to interpolate\n     * @returns {string} interpolated message\n     */\n    interpolateRecord(record, extra) {\n        return record.replace(/\\$\\{(\\S+)\\}/g, function (all) {\n            let token = all.slice(2, all.length - 1);\n            return extra[token] || all;\n        });\n    }\n    /**\n     * Function to format message from the record to log\n     * @param record - Log record\n     * @returns {string} formatted message\n     */\n    formatMessage(record) {\n        const message = record.getMessage();\n        let formattedMessage;\n        if (message instanceof Error) {\n            formattedMessage = `${message.message}`;\n        }\n        else {\n            formattedMessage = this.interpolateRecord(message, record.extra);\n        }\n        return formattedMessage;\n    }\n    /**\n     * @override\n     */\n    formatRecord(record) {\n        const fr = {\n            message: this.formatMessage(record),\n            timestamp: record.getIsoFormatTime(),\n            level: record.level,\n            context: record.extra,\n            user: record.extra?.user\n        };\n        if (this.isError(record.getMessage())) {\n            fr.stack_info = this.getStack(record);\n        }\n        return JSON.stringify(fr);\n    }\n}\nexport { BasicFormatter, JSONFormatter };\n//# sourceMappingURL=formatter.js.map","import { BasicFormatter } from './formatter';\nimport { ConsoleHandler } from './handler';\nimport { Logger } from './logger';\n/**\n * Function to get basic logger instance\n * This returns a console logger with basic logging\n * @returns {Logger} Logger instance\n */\nexport function get_basic_logger() {\n    const l = new Logger();\n    const h = new ConsoleHandler();\n    const f = new BasicFormatter();\n    h.setFormatter(f);\n    l.addHandler(h);\n    return l;\n}\n/**\n * Function to get custom logger instance\n * @param {CustomLoggerProps} props -  CustomLoggerProps object containing handlers, formatter and level\n * @param {Array<BaseHandler>} [props.handlers=[new ConsoleHandler()]] - List of handlers to add to logger\n * @param {BaseFormatter} [props.formatter=new BasicFormatter()] - Formatter to use for logging messages\n * @param {1|2|3|4|5} [props.level=1] - Log level to use for logging messages\n * @returns {Logger} Logger instance\n */\nexport function get_custom_logger(props) {\n    const { handlers = [new ConsoleHandler()], level = 1, formatter = new BasicFormatter() } = props;\n    const l = new Logger();\n    handlers.forEach(h => {\n        h.setLevel(level);\n        h.setFormatter(formatter);\n        l.addHandler(h);\n    });\n    return l;\n}\n//# sourceMappingURL=utils.js.map"],"names":["Levels","LevelTags","LogRecord","event","level","levelNo","extra","context_key","args","time","constructor","debug","this","getMessage","bind","getTimeInMilliseconds","getIsoFormatTime","getFormattedTime","moment","unix","toISOString","format","current_epoc","Moment","Logger","handlers","addHandler","handler","push","setLevel","createRecord","tag","props","handle","record","emit","filter_record","current_level","log_level","not_set","info","message","warn","error","critical","BaseHandler","formatter","setFormatter","filter","BaseFormatter","value","formatRecord","ConsoleHandler","getConsoleMethod","method","toLowerCase","console","log","call","endpoint","super","postToSumo","axios","post","headers","then","response","data","BasicFormatter","replace","all","token","slice","length","isError","Error","getStack","stack","interpolateRecord","formatMessage","formattedMessage","fr","timestamp","context","user","stack_info","JSON","stringify","l","h","f","forEach"],"mappings":"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"}